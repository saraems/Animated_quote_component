{"version":3,"sources":["components/Sentence.js","App.js","serviceWorker.js","index.js"],"names":["Sentence","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","arr","sentences","letterTiming","time","fullSentence","letterByLetter","waitForLetter","_wait","asyncToGenerator","regenerator_default","a","mark","_callee","_this2","wrap","_context","prev","next","abrupt","Promise","resolve","setTimeout","stop","apply","arguments","waitForSentence","_wait2","_callee2","_context2","loop","_count","_callee3","i","sentence","j","_context3","length","setState","react_default","createElement","className","Component","App","src_components_Sentence","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.cef329c8.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './Sentence.css'\n\n\n\nclass Sentence extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            arr: this.props.sentences || [\"Hello world\"],\n            letterTiming: this.props.time || 500,\n            fullSentence: \"\",\n            letterByLetter: \"\"\n        }\n    }\n\n    async componentDidMount() {\n\n        this.waitForLetter = async function wait() {\n            return new Promise((resolve) => {\n                setTimeout(resolve, this.state.letterTiming);\n            });\n        };\n\n        this.waitForSentence = async function wait() {\n            return new Promise(function(resolve) {\n                setTimeout(resolve, 2000);\n            });\n        };\n\n        this.loop = async function count() {\n            while(true) {\n                for (let i = 0; i < this.state.arr.length; i++) {\n                    this.setState({\n                        fullSentence: this.state.arr[i]\n                    });\n                    // console.log(this.state.arr[i]);\n                    let sentence = this.state.arr[i];\n                    for (let j = 0; j < this.state.arr[i].length; j++) {\n                        await this.waitForLetter();\n                        // console.log(sentence[j]);\n                        this.setState({\n                            letterByLetter: this.state.letterByLetter += sentence[j]\n                        })\n                    }\n                    await this.waitForSentence();\n                    this.setState({\n                        letterByLetter: \"\"\n                    })\n                }\n            }\n        };\n\n        this.loop()\n    }\n\n    render() {\n        return (\n            <div className='sentence_container'>\n                <h1>{ this.state.fullSentence }</h1>\n                <p>{ this.state.letterByLetter }</p>\n            </div>\n        );\n    }\n}\n\nexport default Sentence;\n","import React, { Component } from 'react';\nimport Sentence from './components/Sentence';\n\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n        <Sentence time={ 500 } sentences={ [\"Trzeba z żywymi naprzód iść, po życie sięgać nowe...\",  \"A nie w uwiędłych laurów liść z uporem stroić głowę.\"] }/>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}